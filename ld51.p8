pico-8 cartridge // http://www.pico-8.com
version 38
__lua__

phase=0
lock=false -- lock input

delta=0.0166666

score=0
score_pos={}
score_rect_pos={}

function _init()
 init_title()
 init_game_over()
	init_field()
	init_shape()
	init_bonus()
	init_time()
	init_particles()
	score_pos=get_tile_pos(-1,fs.y/2)
	score_pos.x-=3
	score_rect_pos={
			x=score_pos.x+1,
			y=score_pos.y+2}
end

function _draw()
 if is_title then
 	draw_title()
 	return
 end
	if game_over then
		draw_game_over()
		return
	end
	draw_border()
	--cls(clr_col)
	draw_field()
	draw_shape()
	draw_bonus()
	draw_score()
	draw_sh_left()
	draw_time_left()
	draw_particles()
	
	draw_debug()
end

function _update60()
	check_input()
 if is_title then
  update_title()
  return
 end
 if game_over then
  update_game_over()
 	return
 end
 update_particles()
	update_cor()
	new_flash()
	update_tiles()
	if lock then return end
	update_shape()
 update_time()
end

function check_input()
 if lock then return end
	if is_title then
		if btnp(❎) then
			is_title=false
		end
		return
	end
	if btnp(⬆️) then
		drop_shape()
	end
	if btnp(⬅️) then
		sh_offset=max(sh_offset-1,0)
	end
	if btnp(➡️) then
		mpos=0
		for s in all(sh) do
			mpos=max(mpos,s.x)
		end
		sh_offset=min(sh_offset+1,fs.x-mpos-1)
	end
	if btnp(❎) then
  run()
	end
end

function switch_phase()
	cor_add(drop_left_cor)
end

flash=0
function new_flash()
 flash=flr(rnd(16))
end

function move_to_target(val,tar,speed)
 local v=val+(tar-val)*delta*speed
 if abs(v-tar)<0.05 then return tar end
 return v
end
-->8
--shapes
sh={} -- current shape
sh_offset=0 -- shape x offset from input
sh_render_offset=0 -- to smoothly move shape

sh_left=3
sh_max=3

sh_templates={ -- possible shapes
	{
		{x=0,y=0}
	},
	{
		{x=0,y=0},
		{x=1,y=0}
	},
	{
		{x=0,y=0},
		{x=1,y=0}
	},
	{
		{x=0,y=0},
		{x=0,y=1},
	},
	{
		{x=0,y=0},
		{x=0,y=1},
		{x=1,y=0}
	},
	{
		{x=0,y=0},
		{x=1,y=0},
		{x=2,y=0}
	},
	{
		{x=0,y=0},
		{x=0,y=1},
		{x=1,y=1}
	},
	{
		{x=0,y=0},
		{x=0,y=1},
		{x=0,y=2}
	},
	{
		{x=0,y=0},
		{x=1,y=0},
		{x=2,y=0},
		{x=1,y=1},
	},
	{
		{x=0,y=1},
		{x=1,y=1},
		{x=2,y=1},
		{x=1,y=0},
	},
	{
		{x=0,y=0},
		{x=1,y=1},
		{x=0,y=1},
		{x=1,y=0},
	}
}

function init_shape()
	get_new_shape()
end

function update_shape()
 sh_render_offset=move_to_target(sh_render_offset,sh_offset,10)
end

function draw_shape()
	local col=phase*7
	if b_active then
		col=rnd(32)
	end
	for t in all(sh) do
		pos=get_tile_pos(sh_render_offset+t.x,t.y+fs.y)
		rectfill(pos.x,pos.y,pos.x+ts-1,pos.y+ts-1,col)
	end
end

function drop_shape()
	score+=1
	sh_left-=1
	if sh_left<0 then
		sh_max+=1
		sh_left=0
	end
	if score==10 then
		score_pos.x-=2
	end
	if b_active then
		do_drop_bonus()
		sfx(12)
		return
	end
	sfx(10)
	local drop_pos=0
	for t in all(sh) do
		x=t.x+sh_offset
		for y=fs.y,-1,-1 do
			if is_tile_filled(x,y-1+t.y) then
				drop_pos=max(drop_pos,y)
				break
			end
		end
	end
	for t in all(sh) do
	 local pos={x=t.x+sh_offset,y=t.y+drop_pos}
	 if pos.y>=fs.y then
	  cor_add(function()
	  	lock=true
	  	clr_col=8
	  	for i=1,120 do
	  	 yield()
	  	end
		 	game_over=true
		 end)
	 	return false
	 end
--		debug(tostr(pos.x).." "..tostr(pos.y))
		fill_tile(pos.x,pos.y)
	end
	get_new_shape()
	return true
end

function drop_left_cor()
 lock=true
 clr_col=8
 for i=1,60 do
 	yield()
 end
	local wait=60
 while sh_left > 0 do
 	local v=drop_shape()
 	for i=0,wait do
 		yield()
 	end
 	if not v then return end
 end
 lock=false
 clr_col=13
	cor_add(function()
	 sh_left=sh_max
		phase=1-phase
		sfx(13)
		for row=0,fs.y/2-1,1 do
	  field[row], field[fs.y-1-row] = field[fs.y-1-row], field[row]
		end
		sh_offset=0
		place_bonus()
	end)
end

function do_drop_bonus()
	b_active=false
	for t in all(sh) do
		x=t.x+sh_offset
		for y=fs.y-1,0,-1 do
			if is_tile_filled(x,y) then
				unfill_tile(x,y)
				break
			end
		end
	end
end

function get_new_shape()
	sh=rnd(sh_templates)
end

function is_tile_flashing(x,y)
	if not b_active or not is_tile_filled(x,y) then return false end
	local cnt=under_shape_cnt(x,y)
	local t_cnt=under_filled_cnt(x,y)
	return cnt > t_cnt
end

function is_tile_trail(x,y)
	if is_tile_filled(x,y) then return end
	local cnt=under_shape_cnt(x,y)
	local t_cnt=under_filled_cnt(x,y)
	return cnt > 0 and t_cnt == 0
end

function under_shape_cnt(x,y)
	local cnt=0
	for t in all(sh) do
		if t.x+sh_offset==x then
			cnt+=1
		end
	end
	return cnt
end

function under_filled_cnt(x,y)
	local cnt=0
	for ty=y+1,fs.y-1,1 do
		if is_tile_filled(x,ty) then
			cnt+=1
		end
	end
	return cnt
end

function draw_sh_left()
	local sh_radius=2
	for i=0,sh_max-1,1 do
		local pos=get_tile_pos(sh_render_offset-1,fs.y)
		pos.y+=ts/2+i+cos(time()+i*0.2)*2
		pos.x-=i*(sh_radius+4)
		circfill(pos.x,pos.y,sh_radius,phase*7)
		if i>=sh_left then
			circfill(pos.x,pos.y,sh_radius-1,clr_col)
		end
	end
end
-->8
--field

field={}
fs={x=8,y=12} -- field size
f_offset={x=32,y=6} -- field render offset
ts=8 -- tile size

function init_field()
	for y=0, fs.y-1 do
		field[y] = {}
		for x=0, fs.x-1 do
			field[y][x]=
			  {
			    v=y>=fs.y/2,ry=0
			  }
		end
	end
	flip_tile(0,fs.y/2)
	flip_tile(fs.x-1,fs.y/2)
end

function update_tiles()
	for x=0, fs.x-1 do
		for y=0, fs.y-1 do
			local pos=get_tile_pos(x,y)
			field[y][x].ry=move_to_target(field[y][x].ry,pos.y,10)
		end
	end
end

function draw_field()
	for x=0, fs.x-1 do
		for y=0, fs.y-1 do
			draw_tile(x,y)
		end
	end
end

function draw_tile(x,y)
	local col=0
 local	t=field[y][x]
	if t.v then col=7 end
	if is_tile_flashing(x,y) then
		col=flash
	end
	if is_tile_trail(x,y) then
		if phase==0 then
			col=5
		else col=6
		end
	end
	pos=get_tile_pos(x,y)
	pos.y=t.ry
	rectfill(pos.x,pos.y,pos.x+ts-1,pos.y+ts-1,col)
end

function get_tile_pos(x,y)
	return {x=x*ts+f_offset.x,y=y*ts+f_offset.y}
end

function is_tile_filled(x,y)
	if x >= fs.x or y >= fs.y
	 or x < 0 or y < 0 then
	 return false
	end
	f = phase != 0
	return field[y][x].v == f
end

function fill_tile(x,y)
	if x >= fs.x or y >= fs.y
	 or x < 0 or y < 0 then
	 return
	end
	field[y][x].v = phase == 1
	local pos=get_tile_pos(x,y)
	pos.x+=ts/2
	pos.y+=ts/2
	particle_explosion(pos.x,pos.y,7,20)
	particle_explosion(pos.x,pos.y,0,20)
	if b_placed and b_pos.x==x and b_pos.y==y then
		take_bonus()
	end
end

function unfill_tile(x,y)
 local pos=get_tile_pos(x,y)
	pos.x+=ts/2
	pos.y+=ts/2
	particle_explosion(pos.x,pos.y,-1,20)
	field[y][x].v = phase != 1
end

function flip_tile(x,y)
	field[y][x].v=not field[y][x]
end
-->8
--debug

debug_str={}
debug_max_lines=7
function debug(str)
	debug_str[#debug_str+1]=str
	if #debug_str>=debug_max_lines then
		deli(debug_str,1)
	end
end

function draw_debug()
	for s in all(debug_str) do
		print(s,11)
	end
end
-->8
--bonus

b_active=false
b_placed=false
b_pos={}

function init_bonus()
	--place_bonus()
end

function draw_bonus()
 if not b_placed then return end
	pos=get_tile_pos(b_pos.x,b_pos.y)
	pos.x += ts / 2
	pos.y += ts / 2
	circfill(pos.x,pos.y,2,flash)
end

function place_bonus()
	b_placed=true
	x = flr(rnd(fs.x))
	for y=0,fs.y-1,1 do
		if not is_tile_filled(x,y) then
			b_pos={x=x,y=y}
			break
		end
	end
end

function take_bonus()
	b_active=true
	b_placed=false
	sfx(11)
end
-->8
--time
time_left=10
time_pos={}

function init_time()
	time_pos=get_tile_pos(fs.x,fs.y/2)
	time_pos.x+=5
end

function draw_time_left()
	draw_time_rect()
	print(flr(time_left*100)/100,time_pos.x,time_pos.y,9)
end

function update_time()
	time_left-=delta
	if time_left<0 then
		time_left=10
		switch_phase()
	end
end

function draw_time_rect()
	local pos=get_tile_pos(fs.x,0)
	pos.x+=3
	local size={x=18,y=fs.y*ts-1}
	rectfill(pos.x,pos.y,pos.x+size.x,pos.y+size.y,phase*7)
	rectfill(pos.x,pos.y+(1-time_left/10)*size.y,pos.x+size.x,pos.y+size.y,(1-phase)*7)
end
-->8
--coroutine

cors={}

function cor_add(c)
	cors[#cors+1]=cocreate(c)
end

function update_cor()
	while #cors>0 and costatus(cors[1]) == 'dead' do
		deli(cors,1)
	end
	if #cors>0 then
	 coresume(cors[1])
	end
end
-->8
--ui
clr_col=13
border_col=4
border_w=3
function draw_border()
	border_col=phase*7
	if b_active then
		border_col=flash
	end
	cls(border_col)
	rectfill(border_w,border_w,127-border_w,127-border_w,clr_col)
end

function draw_score()
	local size=7+sin(time()*0.5)*1.1
	local pos=score_rect_pos
	local rectcol=phase*7
	local textcol=(1-phase)*7
	circfill(pos.x,pos.y,size,rectcol)
	print(score,score_pos.x,score_pos.y,textcol)
end



game_over=false
go_poss={}
function init_game_over()
	for i=1,18 do
		go_poss[#go_poss+1]=
		{
			x=64,y=64
		}
	end
	go_c_shift=flr(rnd(16))
end

function update_game_over()
 music(-1)
 if btnp(❎) then
  run()
 end
 local h=10
 local tk=0.5
	for k,t in pairs(go_poss) do
		t.x=64+sin(time()*tk+k*0.1)*h*(1.3-k/#go_poss)
		t.y=64+cos(time()*tk+k*0.1)*h*(1.3-k/#go_poss)
	end
end

function draw_game_over()
	cls(0)
	local xoff=2
	local s=score
	while s/10>1 do
	 xoff+=2
	 s/=10
	end
	for k,t in pairs(go_poss) do
		circfill(t.x,t.y,50-k*1.5,k+go_c_shift)
	end
	print("game over",45,0,7)
	local pos=go_poss[#go_poss]
	print(score,pos.x-xoff,pos.y,rnd(16))
end




is_title=true
title_poss={}
t_size=20
function init_title()
 music(0)
	for i=0,25 do
		title_poss[#title_poss+1]=
			{x=i*6-30,y=10,c=i%2*5}
	end
end

function draw_title()
 cls(7)
	for k,t in pairs(title_poss) do
		local col = k%6==0 and rnd(16) or t.c
		rect(t.x,t.y,t.x+t_size,t.y+t_size,col)
	end
	if time() > 2 and flr(time()*3)%2==0 then
		print("press ❎ to start",
		  30,95,0)
	end
end

function update_title()
	for k,t in pairs(title_poss) do
	 local sk=min(time()/3,1)
		title_poss[k].y=50+sin(time()+k*0.1)*(k*0.5*sk)
	end
end
-->8
--particles
particles={}

function init_particles()
	for i=1,100 do
		particles[#particles + 1] = create_particle()
	end
end

function update_particles(fps)
	for p in all(particles) do
		if p.enabled then
			p:update(fps)
		end
	end
end

function draw_particles()
	for p in all(particles) do
		if p.enabled then
			p:draw()
		end
	end
end

function particle_explosion(x, y, col, cnt)
	enable_particles(cnt,x,y,col)
end

function create_particle()
	local particle =
	{
		pos={x=0,y=0}, vel={x=0,y=0}, start_pos={x=0,y=0},
		size_cur=2, size_start=2, size_over_distance=-0.12,
		col=2,

		update = function(self)
			self.pos.x += self.vel.x / 60
			self.pos.y += self.vel.y / 60
			self.size_cur = self.size_start + self.size_over_distance * v_mag{x=self.pos.x-self.start_pos.x,y=self.pos.y-self.start_pos.y}
			if self.size_cur <= 0 then self.enabled = false end
		end,

		draw = function(self)
		 local col=self.col==-1 and flash or self.col
			circfill(self.pos.x,self.pos.y,self.size_cur,col)
		end,

		enabled=false
	}
	return particle
end

function enable_particles(cnt, x, y, col)
	for p in all(particles) do
		if cnt == 0 then return end
		if not p.enabled then
			p.enabled = true
			p.pos = {x=x,y=y}
			p.start_pos = {x=x,y=y}
			p.col = col
			p.vel = v_mults(random_circle_vec(), 20 + rnd(17))
			cnt-=1
		end
	end
end
-->8
--vectors

function v_addv( v1, v2 )
  return { x = v1.x + v2.x, y = v1.y + v2.y }
end

-- subtract v2 from v1
function v_subv( v1, v2 )
  return { x = v1.x - v2.x, y = v1.y - v2.y }
end

-- multiply v by scalar n
function v_mults( v, n )
  return { x = v.x * n, y = v.y * n }
end

-- divide v by scalar n
function v_divs( v, n )
  return { x = v.x / n, y = v.y / n }
end

-- gets magnitude of v, squared (faster than v_mag)
function v_magsqr( v )
  return ( v.x * v.x ) + ( v.y * v.y )
end

-- compute magnitude of v
function v_mag( v )
  return sqrt( ( v.x * v.x ) + ( v.y * v.y ) )
end

-- normalizes v into a unit vector
function v_normalize( v )
  local len = v_mag( v )
  return { x = v.x / len, y = v.y / len }
end

-- computes dot product between v1 and v2
function v_dot( v1, v2 )
  return ( v1.x * v2.x ) + ( v1.y * v2.y )
end

-- computes the reflection vector between vector v and normal n
-- note : assumes v and n are normalized
function v_reflect( v, n )
  local dot = v_dot( v, n )
  local wdnv = v_mults( v_mults( n, dot ), 2.0 )
  local refv = v_subv( v, wdnv )
  return refv
end

function random_circle_vec()
	return v_normalize{x=rnd() - 0.5, y=rnd() - 0.5}
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777777777777777eeeeeeeeeeeeeeeeeeeee77777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777777777000000e0000000000000077777e77777777777777777777777777777777777
777777777777777777777777777777777777777777777777777777777777777777077777e7777700000000000000000000077777777777777777777755555555
777777777777777777777777777777777777777777777777777777777777777777077777e7777707777777077777e77777077777777777777777777757777777
777777777777777777777777777777777777777777777777777777777777777777077777e7777707777777077777e77777077777777777777777777757777777
777777000000555555000000000000000000000777777777777777777777555555055555e5555505577777077777e77777077777777777777777777757777777
777777077777577777077777770777775777770777777777777777777777577777077777e7777707577777077777e77777077777777777777777777757777777
111111011111511111011777770777775777770777777777777777777777577777077777e7777707577755555555555555555555577777777777777757777777
177777077777577777071777555555555555555555555777777777777777577777077777e7777707577757077777e77777077777577777777777777757777777
100000000000500777071777570777775777770777775777777777000000500000000000e0077707577757077777e77777077777577777777777777757777777
155555055777570777071777570777775777770777775777777777077777577777077777e7077707577757077777e77777077777577777777700000050000000
170777075777570777071777570777000000000000000000000777077777577777077777e7077707577757077777e77777077777577777777707777757777777
170777075777570777071777570777075777770777775777770777077777577777077777e7077707577757077777e77777077777577777777707777757777777
170777075777570777071777570777075777770777775777555555055555555555055777e7077707577757077777e77777077777577777777707777757777777
170777075777570777071777570777075777888888888888588888088777577777075777e7077707577757077700000000000000000000077707777757777777
170777075777570777071777570777075777870777000000500000000000500777075777e7077707577757077707e77777077777577777077707777757777777
170777075777570777071777570777075777870777075777570777078777570777075777e7077707577757077707e77777077777577777077707777757777777
170777075777570777071777570777075777870777075777570777078777570777075777e7077707577757077707e77777077777577722222202222252222222
170777075777570777071777570777075777870777075777570777078777570777075777e7077707577757077707e77777077777577727077707777757777777
170777075777570777071777570777075777870777075777570777078777570777075777e7077707577757077707e77755555555555525555505577757777777
170777075777570777071777570777075777870777075777570777078777570777075777eeeeee0eeeee5eeeee0ee77757077700000020000000000050077777
17077707577757077707177757077707577787077707577757077707877757077700000000000000000050077707777757077707577727077707577757077777
17077707577757077707177757077707577787077707577757077707877757077777577777077700000050000000000050077707577727077707577755555555
17077707577757077707177757077707577787077707577757077707877757077777577777077777577757777707777757777707577727077707577777077777
17077707577757077707177757077707577787077707577757077707877757077777577777077777577757777707777757777707577727077707577777077777
17077700000055555500000050000000000080077707577757077707877755555555555555555555577757777707777757777707577727077707577777077777
17077777577777077777177757777707777787777707577757077707877777077777577777077777777757777707777757777707577727077707577777077777
11111111111111111111177757777707777787777707577757077707877777077777577777077777777755555505555555555505577727077707577777077777
77077777577777077777777755555505555585555505577757077707877777077777577777077777777777777707777757777707777727077707577777077777
00000000000000077777777777777707777787777707777757077700000000000000000000077777777777777707777757777707777727077707577777077777
55555555577777777777777777777707777787777707777757077777877777077777577777777777777777777707777757777707777727077700000000000000
77777777777777777777777777777700000080000000000050077777877777077777577777777777777777777707777757777707777727077777577777077777
77777777777777777777777777777777777787777707777757777777877777077777577777777777777777777707777757777707777727077777577777077777
77777777777777777777777777777777777787777707777755555555555555555555577777777777777777777707777757777707777727077777577777077777
77777777777777777777777777777777777788888808888888888888877777077777777777777777777777777700000050000000000020077777577777077777
77777777777777777777777777777777777777777700000000000000000000077777777777777777777777777777777757777707777727777777577777077777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777757777707777727777777577777077777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777757777707777722222222222222222222
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777757777707777777777777577777077777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777755555505555555555555577777077777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777700000000000000000000077777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777
77777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777

__sfx__
210f00000c3532230323303273030c3531130311303173030c3531f303233031d3030c3531530316303303030c3532230323303273030c3531130311303173030c3531f303233031d3030c353153031630330303
c50f000000001000010000000001000010c651000010000100001000010000100001000010c651000010000100001000010000000001000010c651000010000100001000010000100001000010c6510000100001
8d0f00000335503355033550330006355063550330008300033550335503355033000635506355082000830001355013550135503300033550335508300083000635506355063550630003355033550630001300
8b0f00001b775007050070520775007050070522775007051b775007050070520775007050070522775007051977500705007051b77500705007051e775007051977500705007051b77500705007051e77500705
110f00001b574005040050420574005040050422574005041b574005040050420574005040050422574005041957400504005041b57400504005041e574005041957400504005041b57400504005041e57400504
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
490200003c650216002f62021600096201f650056501965024650156500565010650246500e6500a6500c6501c6500a6500265015650076500265006650066501465005650046500365002650016500665000650
28020000061500610005100111501510013100071001310014100241501610029150291001f1002e1503010032100351501d1001e100381001e100241003c120321002f100241003d15027100281003b1401b100
88030000321013a1511d1011e1013a1511e1013a1513a151321013a1511d1011e1013a1511e1013a1513a131321013a1311d1011e1013a1311e1013a1213a121321013a1111d1011e1013a1111e1013a1113a111
910300003b27536275312752d2752a2752a27524275202751d275182751527512275102750d2750b2750927508275072750627506275082750a2750d2751027512275172751c275232752a2752e2753327537275
__music__
00 00414344
00 00014344
00 00010244
00 00010244
01 00010203
00 00010203
00 00010203
00 00010203
00 00014244
00 40010304
00 00010204
00 00010204
00 00010204
00 00010204
00 40014203
00 40014203
00 00014203
02 00014203

